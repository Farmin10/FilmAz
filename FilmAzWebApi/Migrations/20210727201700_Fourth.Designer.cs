// <auto-generated />
using DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FilmAzWebApi.Migrations
{
    [DbContext(typeof(FilmContext))]
    [Migration("20210727201700_Fourth")]
    partial class Fourth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Concrete.FamousActor", b =>
                {
                    b.Property<int>("FamousActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamousActorId");

                    b.ToTable("FamousActors");

                    b.HasData(
                        new
                        {
                            FamousActorId = 1,
                            ActorName = "Farmin"
                        },
                        new
                        {
                            FamousActorId = 2,
                            ActorName = "Zaur"
                        },
                        new
                        {
                            FamousActorId = 3,
                            ActorName = "Hasan"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmCountryId")
                        .HasColumnType("int");

                    b.Property<string>("FilmDirector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilmDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("IMDBId")
                        .HasColumnType("float");

                    b.Property<bool>("IsHD")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionYearId")
                        .HasColumnType("int");

                    b.HasKey("FilmId");

                    b.HasIndex("FilmCountryId");

                    b.HasIndex("ProductionYearId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Entities.Concrete.FilmCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmAndCategories");
                });

            modelBuilder.Entity("Entities.Concrete.FilmCountry", b =>
                {
                    b.Property<int>("FilmCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilmCountryId");

                    b.ToTable("FilmCountries");

                    b.HasData(
                        new
                        {
                            FilmCountryId = 1,
                            CountryName = "America"
                        },
                        new
                        {
                            FilmCountryId = 2,
                            CountryName = "Turkey"
                        },
                        new
                        {
                            FilmCountryId = 3,
                            CountryName = "Hindu"
                        },
                        new
                        {
                            FilmCountryId = 4,
                            CountryName = "Columbia"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.FilmFamousActor", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("FamousActorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainRole")
                        .HasColumnType("bit");

                    b.HasKey("FilmId", "FamousActorId");

                    b.HasIndex("FamousActorId");

                    b.ToTable("FilmAndFamousActors");
                });

            modelBuilder.Entity("Entities.Concrete.FilmLanguage", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FilmAndLanguages");
                });

            modelBuilder.Entity("Entities.Concrete.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            LanguageName = "Turkish subtitle"
                        },
                        new
                        {
                            LanguageId = 2,
                            LanguageName = "Turkish dubbing"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ProductionYear", b =>
                {
                    b.Property<int>("ProductionYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ProductionYearId");

                    b.ToTable("ProductionYears");

                    b.HasData(
                        new
                        {
                            ProductionYearId = 1,
                            Year = 2000
                        },
                        new
                        {
                            ProductionYearId = 2,
                            Year = 2001
                        },
                        new
                        {
                            ProductionYearId = 3,
                            Year = 2002
                        },
                        new
                        {
                            ProductionYearId = 4,
                            Year = 2003
                        },
                        new
                        {
                            ProductionYearId = 5,
                            Year = 2004
                        },
                        new
                        {
                            ProductionYearId = 6,
                            Year = 2005
                        },
                        new
                        {
                            ProductionYearId = 7,
                            Year = 2006
                        },
                        new
                        {
                            ProductionYearId = 8,
                            Year = 2007
                        },
                        new
                        {
                            ProductionYearId = 9,
                            Year = 2008
                        },
                        new
                        {
                            ProductionYearId = 10,
                            Year = 2009
                        },
                        new
                        {
                            ProductionYearId = 11,
                            Year = 2010
                        },
                        new
                        {
                            ProductionYearId = 12,
                            Year = 2011
                        },
                        new
                        {
                            ProductionYearId = 13,
                            Year = 2012
                        },
                        new
                        {
                            ProductionYearId = 14,
                            Year = 2013
                        },
                        new
                        {
                            ProductionYearId = 15,
                            Year = 2014
                        },
                        new
                        {
                            ProductionYearId = 16,
                            Year = 2015
                        },
                        new
                        {
                            ProductionYearId = 17,
                            Year = 2016
                        },
                        new
                        {
                            ProductionYearId = 18,
                            Year = 2017
                        },
                        new
                        {
                            ProductionYearId = 19,
                            Year = 2018
                        },
                        new
                        {
                            ProductionYearId = 20,
                            Year = 2019
                        },
                        new
                        {
                            ProductionYearId = 21,
                            Year = 2020
                        },
                        new
                        {
                            ProductionYearId = 22,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Film", b =>
                {
                    b.HasOne("Entities.Concrete.FilmCountry", "FilmCountry")
                        .WithMany("Films")
                        .HasForeignKey("FilmCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.ProductionYear", "ProductionYear")
                        .WithMany()
                        .HasForeignKey("ProductionYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmCountry");

                    b.Navigation("ProductionYear");
                });

            modelBuilder.Entity("Entities.Concrete.FilmCategory", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("FilmCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Film", "Film")
                        .WithMany("FilmCategories")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Entities.Concrete.FilmFamousActor", b =>
                {
                    b.HasOne("Entities.Concrete.FamousActor", "FamousActor")
                        .WithMany("FilmFamousActors")
                        .HasForeignKey("FamousActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Film", "Film")
                        .WithMany("FilmFamousActors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamousActor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Entities.Concrete.FilmLanguage", b =>
                {
                    b.HasOne("Entities.Concrete.Film", "Film")
                        .WithMany("FilmLanguages")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Language", "Language")
                        .WithMany("FilmLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("FilmCategories");
                });

            modelBuilder.Entity("Entities.Concrete.FamousActor", b =>
                {
                    b.Navigation("FilmFamousActors");
                });

            modelBuilder.Entity("Entities.Concrete.Film", b =>
                {
                    b.Navigation("FilmCategories");

                    b.Navigation("FilmFamousActors");

                    b.Navigation("FilmLanguages");
                });

            modelBuilder.Entity("Entities.Concrete.FilmCountry", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("Entities.Concrete.Language", b =>
                {
                    b.Navigation("FilmLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
